body {
  font-size: 1.3rem;
  font-family: 'Roboto', sans-serif;
  font-weight: 400;
  color: #fff;
  background-color: #E10E49;
}

.cd-title {
  position: relative;
  height: 80px;
  line-height: 80px;
  text-align: center;
}
.cd-title h1 {
  font-size: 2rem;
}

.cd-filter, .cd-intro {
  width: 90%;
  text-align: center;
}

.cd-intro {
  margin: 2em auto;
}

.cd-filter {
  margin: 0 auto;
  text-align: center;
}
.cd-filter li {
  position: relative;
  display: inline-block;
  margin: 0;
}
.cd-filter input {
  position: absolute;
  left: 0;
  top: 0;
  opacity: 0;
}

.cd-filter input:checked + label {
  border-color: #e6d925;
  color: rgba(255, 255, 255, 1);
}
.cd-filter label {
  border-color: #e10e49;
  border-style: solid;
  border-width: 0 0 2px;
  color: rgba(255, 255, 255, 0.7);
  cursor: pointer;
  display: inline-block;
  margin: 0;
  padding: 0.4em 0.6em;
}
.cd-filter label:hover {
  border-color: rgba(255, 255, 255, 0.7);
}

.cd-headline {
  font-size: 5rem;
  font-weight: 300;
  line-height: 1;
}

.cd-words-wrapper {
  display: inline-block;
  position: relative;
  text-align: left;
}
.cd-words-wrapper b {
  display: inline-block;
  position: absolute;
  white-space: nowrap;
  left: 0;
  top: 0;
}
.cd-words-wrapper b.is-visible {
  position: relative;
}

/* -------------------------------- 

xscale 

-------------------------------- */
.cd-headline.scale i {
  display: inline-block;
  opacity: 0;
  transform: scale(0);
}
.is-visible .cd-headline.scale i {
  opacity: 1;
}
.cd-headline.scale i.in {
  animation: scale-up 0.6s forwards;
}
.cd-headline.scale i.out {
  animation: scale-down 0.6s forwards;
}

.no-csstransitions .cd-headline.scale i {
  transform: scale(1);
  opacity: 0;
}

.no-csstransitions .cd-headline.scale .is-visible i {
  opacity: 1;
}

@keyframes scale-up {
  0% {
    transform: scale(0);
    opacity: 0;
  }
  60% {
    transform: scale(1.2);
    opacity: 1;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}
@keyframes scale-down {
  0% {
    transform: scale(1);
    opacity: 1;
  }
  60% {
    transform: scale(0);
    opacity: 0;
  }
}


/*===========================================
                  slider             
============================================*/

/**
 * See: http://www.css-101.org/articles/ken-burns_effect/css-transition.php
 */

/**
 * Styling the container (the wrapper)
 * 
 * position is used to make this box a containing block (it becomes a reference for its absolutely positioned children). overflow will hide part of the images moving outside of the box.
 */

#slideshow {
    position:relative;
    width:800px;
    height:400px;
    overflow:hidden;
    border:8px solid #ccc;
    margin-left: 20%;
}

/**
 * Styling the images
 *
 * position:absolute is to put all images in a stack. Dimensions are set to increase the size of these images so their edges do not appear in the parent box when we move them inside the said box.
 * Because the images are now larger than their parent container, we use top, left and margin values to align them in the center of the box.
 * Finally, we set the transition (property and duration). Note that duration values are different for opacity and transform as we want the "fade-in" effect to be faster than the "panning" effect.
 */

#slideshow img {
    position:absolute;
    width:800px;
    height:400px;
    top:50%;
    left:50%;
    margin-left:-400px;
    margin-top:-200px;
    opacity:0;
    -webkit-transition-property: opacity, -webkit-transform;
    -webkit-transition-duration: 3s, 10s;
       -moz-transition-property: opacity, -moz-transform;
       -moz-transition-duration: 3s, 10s;
        -ms-transition-property: opacity, -ms-transform;
        -ms-transition-duration: 3s, 10s;
         -o-transition-property: opacity, -o-transform;
         -o-transition-duration: 3s, 10s;
            transition-property: opacity, transform;
            transition-duration: 3s, 10s;
}

/**
 * We change the point of origin using four corners so images do not move in the same direction. 
 * This technique allows us to create various paths while applying the same translate() values to all images (see the 'fx' class further below).
 */

#slideshow img  {
    -webkit-transform-origin: bottom left;
       -moz-transform-origin: bottom left;
        -ms-transform-origin: bottom left;
         -o-transform-origin: bottom left;
            transform-origin: bottom left;
}

#slideshow :nth-child(2n+1) {
    -webkit-transform-origin: top right;
       -moz-transform-origin: top right;
        -ms-transform-origin: top right;
         -o-transform-origin: top right;
            transform-origin: top right;
}

#slideshow :nth-child(3n+1) {
    -webkit-transform-origin: top left;
       -moz-transform-origin: top left;
        -ms-transform-origin: top left;
         -o-transform-origin: top left;
            transform-origin: top left;
}
#slideshow :nth-child(4n+1) {
  -webkit-transform-origin: bottom right;
     -moz-transform-origin: bottom right;
      -ms-transform-origin: bottom right;
       -o-transform-origin: bottom right;
          transform-origin: bottom right;
}

/**
 * Because of the stacking context, we need to make sure that the first image (in source) is not hidden by the last one. 
 * The rule below moves all images past the second one down the stack. 
 * This is because the second image needs to show on top of the first one when it transitions in.
 */

#slideshow .fx:first-child + img ~ img  {
    z-index:-1;
}

/**
 * Because images are styled with a different point of origin, the following rule will create different panning effects.
 */

#slideshow .fx {
    opacity:1;
    -webkit-transform: scale(1.1);
       -moz-transform: scale(1.1);
        -ms-transform: scale(1.1);
         -o-transform: scale(1.1);
            transform: scale(1.1);
}

/*===========================================
                  slider             
============================================*/


#sec2
h1{

  background-color: black;
  text-align: center;
}